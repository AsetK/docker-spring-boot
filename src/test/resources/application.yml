spring:
  jpa:
    database: postgresql  #The dialect to use is also automatically detected based on the current DataSource,
    #but you can set spring.jpa.database yourself if you want to be explicit and bypass that check on startup.
    show-sql: true
    generate-ddl: false
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        jdbc:
          lob:
            non_contextual_creation: true #to fix some issue, https://github.com/pgjdbc/pgjdbc/issues/1102. Anyway application works, just some exception thrown.


  datasource:
    #Spring Boot can automatically create the schema (DDL scripts) of your DataSource and initialize it (DML scripts).
    #It loads SQL from the standard root classpath locations: schema.sql and data.sql, respectively.
    #In addition, Spring Boot processes the schema-${platform}.sql and data-${platform}.sql files (if present), where platform is the value of spring.datasource.platform.
    #This allows you to switch to database-specific scripts if necessary.

    #    platform: postgres #description on the top
    url: jdbc:postgresql://localhost:5432/springbootexp #Here postgres is a name given to service in docker-compose. Delete or comment @SpringBootTest for correct build
    #    url: jdbc:postgresql://10.12.11.162:5438/springbootexp # Here IP of machine
    username: postgres
    password: demo
    driver-class-name: org.postgresql.Driver
    initialization-mode: always #for schema.sql and data.sql working